"""
Django settings for hl_main project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from io import StringIO
from urllib.parse import urlparse

from environ import Env
from google.cloud import secretmanager

from .base import *

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

PRODUCTION = True
DEBUG = False

GCP_PROJECT_ID = os.environ["GCP_PROJECT_ID"]
GCP_SETTINGS_NAME = os.environ["GCP_SECRETS_NAME"]

# get secrets from gcp secret manager
client = secretmanager.SecretManagerServiceClient()
name = f"projects/{GCP_PROJECT_ID}/secrets/{GCP_SETTINGS_NAME}/versions/latest"
payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")

env.read_env(StringIO(payload))

SECRET_KEY = env("DJANGO_SECRET_KEY")
ALLOWED_HOSTS = [
    # "www.hiredlabs.org",
    # "hiredlabs.org",
    "run-service-dev-001-nfq35uocvq-uw.a.run.app"
    ]
# Application definition
MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("GCP_CLOUDSQL_DB_NAME"),
        "USER": env("GCP_CLOUDSQL_USER"),
        "PASSWORD": env("GCP_CLOUDSQL_PASSWORD"),
        "HOST": env("GCP_CLOUDSQL_PRIVATE_IP"),
        "PORT": 5432,
    }
}


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "main_cache",
    }
}

# Caching
# https://docs.djangoproject.com/en/4.1/topics/cache/#setting-up-the-cache

STATICFILES_DIRS = (os.path.join(BASE_DIR, "main_static/"),
                    os.path.join(BASE_DIR, "frontend/build/static")    )


# RESUME write to gcloud storage

SECURE_HSTS_SECONDS = 25
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# google cloud run proxy sends http to containers
# so need django to recognise HTTP_X_FORWARDED_PROTO header
# to stop a redirect loop
SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

CLOUDRUN_SERVICE_URL = os.environ.get("CLOUDRUN_SERVICE_URL")
# ALLOWED_HOSTS = []
if CLOUDRUN_SERVICE_URL:
    ALLOWED_HOSTS.append(urlparse(CLOUDRUN_SERVICE_URL).netloc)
    CSRF_TRUSTED_ORIGINS = [CLOUDRUN_SERVICE_URL]


CLOUDRUN_WORKER_URL = os.environ.get("CLOUDRUN_WORKER_URL")
if CLOUDRUN_WORKER_URL:
    ALLOWED_HOSTS.append(urlparse(CLOUDRUN_WORKER_URL).netloc)

if DEBUG:
    ALLOWED_HOSTS.append("localhost")


GCP_REGION = os.environ["GCP_REGION"]
GCP_CLOUDSQL_INSTANCE_NAME = os.environ["GCP_CLOUDSQL_INSTANCE_NAME"]
GCP_TASK_QUEUE = os.environ["GCP_TASK_QUEUE"]
GCP_SERVICE_ACCOUNT = os.environ["GCP_SERVICE_ACCOUNT"]
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]
VA_API_KEY = os.environ["VA_API_KEY"]



DATABASES = {
    "default": {
        "NAME": os.environ["GCP_CLOUDSQL_DB_NAME"],
        "HOST": os.environ["GCP_CLOUDSQL_PRIVATE_IP"],
        "USER": os.environ["GCP_CLOUDSQL_USER"],
        "PASSWORD": os.environ["GCP_CLOUDSQL_PASSWORD"],
        "PORT": 5432,
        "ENGINE": "django.db.backends.postgresql",
    }
}

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

GS_BUCKET_NAME = f"{os.environ['GCP_PROJECT_ID']}-{os.environ['GCP_BUCKET_SUFFIX']}"
GS_DEFAULT_ACL = "projectPrivate"
GS_FILE_OVERWRITE = False

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
    "default": {
        "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
    },
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}
