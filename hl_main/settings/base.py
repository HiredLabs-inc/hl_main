"""
Django settings for hl_main project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

from environ import Env

# Utility function to get secrets from GCP Secret Manager
# from hl_main.secret_loader import get_secrets

# Load secrets from GCP Secret Manager
# secrets = get_secrets()

# Set environment variables
# os.environ['GCP_REGION'] = secrets.get('GCP_REGION')
# os.environ['CLOUDRUN_WORKER_URL'] = secrets.get('CLOUDRUN_WORKER_URL')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

env = Env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/


ALLOWED_HOSTS = ["*"]
MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # needed for allauth
    "django.contrib.sites",
    # third party
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # hiredlabs apps
    "cold_apply.apps.ColdApplyConfig",
    "rates.apps.RatesConfig",
    "releases.apps.ReleasesConfig",
    "resume.apps.ResumeConfig",
    "userprofile.apps.UserprofileConfig",
    "background_tasks.apps.BackgroundTasksConfig",
    "frontend.apps.FrontendConfig",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Custom middleware
    # "hl_main.middleware.RegionMiddleware",
]


# for django_debug_toolbar

ROOT_URLCONF = "hl_main.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.media",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "builtins": [
                "frontend.templatetags.breadcrumbs",
            ],
        },
    },
]

WSGI_APPLICATION = "hl_main.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


# SESSION_ENGINE = "django.contrib.sessions.backends.cache"

# Caching
# https://docs.djangoproject.com/en/4.1/topics/cache/#setting-up-the-cache

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Path to machine learning and natural language processing scripts and models
ML_MODELS_PATH = os.path.join(
    BASE_DIR, "resume_parser/static/scripts/resume_parser/final_models/"
)
ENTITIES_PATH = os.path.join(
    BASE_DIR, "resume_parser/static/scripts/resume_parser/entities/"
)

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Los_Angeles"

USE_I18N = True

USE_TZ = True

# Format nubmers with thousands separators
USE_THOUSAND_SEPARATOR = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/


STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "main_static/"),
    BASE_DIR / "frontend" / "build" / "static",
)

STATIC_URL = "static/"
RESUME_OUT_PATH = os.path.join(BASE_DIR, "resume_parser/static/output/")
SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, "creds/application_default_credentials.json")

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# LOGIN_REDIRECT_URL = "staff"
# LOGIN_URL = "userprofile:login"


# DJANGO ALLAUTH CONFIG
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_PASSWORD_MIN_LENGTH = 8
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_SESSION_REMEMBER = True

# Use custom form for signup to use only email verification without a password
ACCOUNT_FORMS = {
    "signup": "userprofile.forms.CustomSignupForm",
}

LOGIN_REDIRECT_URL = "userprofile:user_home"

ACCOUNT_ADAPTER = "hl_main.adapter.CustomAccountAdapter"
